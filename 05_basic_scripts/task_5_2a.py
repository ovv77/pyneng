# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

raw_str = input('Enter network address as 192.168.1.0/24 : ')
# raw_str = '217.113.115.3/28'
addr = raw_str.split('/')[0]
mask = int(raw_str.split('/')[1])

b_addr = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(*map(int, addr.split('.')))
b_netaddr = b_addr[0:mask]+'0'*(32-mask)

b_mask = '1'*mask+'0'*(32-mask)


print(f'''Network:
{int(b_netaddr[0:8],2):<8} {int(b_netaddr[8:16],2):<8} \
{int(b_netaddr[16:24],2):<8} {int(b_netaddr[24:32],2):<8}
{b_netaddr[0:8]} {b_netaddr[8:16]} {b_netaddr[16:24]} {b_netaddr[24:32]}

Mask:
/{mask}
{int(b_mask[0:8],2):<8} {int(b_mask[8:16],2):<8} \
{int(b_mask[16:24],2):<8} {int(b_mask[24:32],2):<8}
{b_mask[0:8]} {b_mask[8:16]} {b_mask[16:24]} {b_mask[24:32]}

''')
